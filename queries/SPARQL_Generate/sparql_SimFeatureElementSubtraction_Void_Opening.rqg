BASE <http://trans.example.com/>
PREFIX iter: <http://w3id.org/sparql-generate/iter/>
PREFIX fn: <http://w3id.org/sparql-generate/fn/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> 
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
PREFIX simcore: <http://www.opteemal.eu/schema/2017/01/SimModelCore#>
PREFIX simgeom: <http://www.opteemal.eu/schema/2017/01/ResourcesGeometry#>
PREFIX simbldg: <http://www.opteemal.eu/schema/2017/01/BuildingModel#>
PREFIX inst:  <http://opteemal-project.eu/resource/simmodel#>

# last modification 2019.06.07

# *******************************************
# TO VERIFY WITH TORRE TURINA!!!
# *******************************************

GENERATE 
{
	# SLAB
	GENERATE 
	{
		?IfcOpeningElement_IRI 
			rdf:type 							simgeom:SimFeatureElementSubtraction_Void_Opening ;
			simcore:ifcGlobalID 				?IfcGloballyUniqueIdValue ;
			simcore:name 						?name_IfcRootValue ;
			simcore:refId 						?simVoidRefId ;
			simgeom:voidedBldgElement			?IfcSlab_IRI ;
			simgeom:placement 					?IfcLocalPlacement ;
			simgeom:openingArea					?area ;
			simgeom:openingVolume				?volume;
			simcore:objectType 					"Opening"^^xsd:string ;
			simcore:isTemplateObject 			"false"^^xsd:boolean ;
			simcore:simModelSubtype 			"Default"^^xsd:string ;
			simcore:simModelType 				"FeatureElementSubtraction_Void_Opening"^^xsd:string ;
			simcore:simUniqueID 				"not defined" ;
			simcore:sourceModelObjectType 		"IfcOpeningElement"^^xsd:string ;
			simcore:sourceModelSchema 			"IFC4" ;
			simcore:tag 						"not defined" ;
			.
	}
	ITERATOR iter:XPath(?source, "//ifc_uos/IfcRelVoidsElement[RelatedOpeningElement/IfcOpeningElement[@ref='"+?IfcOpeningElement_ID+"']]" ) AS ?IfcRelVoidsElement
	WHERE
	{
		BIND( fn:XPath(?IfcRelVoidsElement,"/IfcRelVoidsElement/RelatingBuildingElement/IfcSlab/@ref" ) AS ?IfcSlab_ID )
		BIND( IRI( CONCAT( ?base, "IfcWall_", ?IfcSlab_ID ) ) AS ?IfcSlab_IRI )
		FILTER ( xsd:string(?IfcSlab_ID) != xsd:string("") ). 
	}.
}

SOURCE <http://ex.org/file1> AS ?source
# This name variable is mapped to a file path in a new line that will be 
# included by the program linked to the original file:

ITERATOR iter:XPath(?source, "//ifc_uos/IfcOpeningElement" ) AS ?IfcOpeningElement
WHERE 
{
    # 1. Extract base URI:
	BIND (str(inst:) as ?base)
	
	# 2. Extract element names:
	BIND( fn:XPath(?IfcOpeningElement,"/IfcOpeningElement/@id" ) AS ?IfcOpeningElement_ID ) 
	BIND( fn:XPath(?IfcOpeningElement,"/IfcOpeningElement/CompositionType/text()") AS ?ElementType2 )
	BIND( fn:XPath(?IfcOpeningElement,"/IfcOpeningElement/GlobalId/text()") AS ?IfcGloballyUniqueIdValue )
	BIND( fn:XPath(?IfcOpeningElement,"/IfcOpeningElement/ObjectPlacement/IfcLocalPlacement/text()") AS ?IfcLocalPlacement )	
	
	# 3. Refine element names:
	BIND( IRI( CONCAT( ?base, "IfcOpeningElement_I", ?IfcOpeningElement_ID ) ) AS ?IfcOpeningElement_IRI )
	BIND( (xsd:ID(CONCAT("ID", ?IfcOpeningElement_ID))) as ?IfcOpeningElementRefId ) . 
}