BASE <http://trans.example.com/>
PREFIX iter: <http://w3id.org/sparql-generate/iter/>
PREFIX fn: <http://w3id.org/sparql-generate/fn/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> 
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
PREFIX simcore: <http://www.opteemal.eu/schema/2017/01/SimModelCore#>
PREFIX simbldg: <http://www.opteemal.eu/schema/2017/01/BuildingModel#>
PREFIX simres: <http://www.opteemal.eu/schema/2017/01/ResourcesGeneral#>
PREFIX list: <https://w3id.org/list#> 
PREFIX inst:  <http://opteemal-project.eu/resource/simmodel#>

# last modification: 2019.06.06

GENERATE
{
	GENERATE
	{
		GENERATE
		{	
			GENERATE
			{
				GENERATE
				{
					GENERATE
					{
						?IfcPlate_IRI 
							rdf:type 						simbldg:SimPanel_Opaque ;
							simbldg:materialList			?IfcMaterialList_IRI ;
							simcore:ifcGlobalID 			?globalId ;
							simcore:isTemplateObject 		"false"^^xsd:boolean ;
							simcore:name 					?name_IfcRoot;		
							simcore:simModelType 			"Solid"^^xsd:string ;
							simcore:sourceModelSchema		"IFC4"^^xsd:string ;
							simcore:sourceModelObjectType 	"IfcPlate"^^xsd:string ;
							simcore:objectType 				"Opaque"^^xsd:string ;
							simcore:simUniqueID 			"not defined"^^xsd:string ;
							simcore:refId 					?RefIdPanel ;
							simcore:tag 					?tag ;
							.				
						GENERATE
						{	
							?IfcMaterialList_IRI 
								rdf:type                       	simbldg:SimList_MaterialList ;
								simbldg:materials              	?IfcMaterialConstituentSet_IRI ;
								simcore:isTemplateObject       	false ;
								simcore:refId                  	?RefIdMaterialLayerSet ;
								simcore:simModelType           	"MaterialList" ;
								simcore:simUniqueID            	"not defined" ;
								simcore:sourceModelSchema      	"IFC4" ;
								.		
							?IfcMaterialConstituentSet_IRI
								rdf:type                 		simbldg:Materials_List ;
								.	
							GENERATE
							{	
								?IfcMaterialConstituentSet_IRI
									list:hasContents  			?IfcMaterial_IRI ;
									.	
							}
							ITERATOR iter:XPath(?source, "//ifc_uos/IfcMaterialLayer[@id='"+?IfcMaterialLayer_REF+"']" ) AS ?IfcMaterialLayer
							WHERE
							{
								BIND( fn:XPath(?IfcMaterialLayer,"/IfcMaterialLayer/Material/IfcMaterial/@ref" ) AS ?IfcMaterial_REF )
								BIND( IRI( CONCAT( ?base, "IfcMaterial_",?IfcMaterial_REF ) ) AS ?IfcMaterial_IRI )
							}.		
						}
						ITERATOR iter:XPath(?source, "//ifc_uos/IfcMaterialLayerSet[@id='"+?IfcMaterialLayerSet_REF+"']" ) AS ?IfcMaterialLayerSet
						WHERE
						{
							BIND( fn:XPath(?IfcMaterialLayerSet,"/IfcMaterialLayerSet/MaterialLayers/IfcMaterialLayer/@ref" ) AS ?IfcMaterialLayer_REF )
							BIND( IRI( CONCAT( ?base, "IfcMaterialConstituentSet_",?IfcMaterialLayer_REF ) ) AS ?IfcMaterialConstituentSet_IRI )
						}.		
					}
					ITERATOR iter:XPath(?source, "//ifc_uos/IfcMaterialLayerSetUsage[@id='"+?IfcMaterialLayerSetUsage_REF+"']" ) AS ?IfcMaterialLayerSetUsage
					WHERE
					{
						BIND( fn:XPath(?IfcMaterialLayerSetUsage,"/IfcMaterialLayerSetUsage/ForLayerSet/IfcMaterialLayerSet/@ref" ) AS ?IfcMaterialLayerSet_REF )
					}.		
				}
				ITERATOR iter:XPath(?source, "//ifc_uos/IfcRelAssociatesMaterial[RelatedObjects/IfcPlate[@ref='"+?IfcPlate_ID+"']]" ) AS ?IfcRelAssociatesMaterial
				WHERE
				{
					BIND( fn:XPath(?IfcRelAssociatesMaterial,"/IfcRelAssociatesMaterial/RelatingMaterial/IfcMaterialLayerSetUsage/@ref" ) AS ?IfcMaterialLayerSetUsage_REF )
					BIND( IRI( CONCAT( ?base, "IfcMaterialList_",?IfcMaterialLayerSetUsage_REF ) ) AS ?IfcMaterialList_IRI )
					BIND( (xsd:ID(CONCAT("ID", ?IfcMaterialLayerSetUsage_REF))) as ?RefIdMaterialLayerSet ) . 
				}.
			}			
			
			# --> FILTER property "Solid"
			ITERATOR iter:XPath(?source, "//ifc_uos/IfcPropertySingleValue[@id='"+?IfcPropertySingleValue_REF+"'][Name = 'Reference']" ) AS ?IfcPropertySingleValue
			WHERE
			{
				BIND( fn:XPath(?IfcPropertySingleValue,"/IfcPropertySingleValue/NominalValue/IfcIdentifier-wrapper/text()") AS ?NominalValue )
				FILTER ( xsd:string(?NominalValue) = xsd:string("Solid") ).
			}.		
		}
		ITERATOR iter:XPath(?source, "//ifc_uos/IfcPropertySet[@id='"+?IfcPropertySet_REF+"']/HasProperties/IfcPropertySingleValue" ) AS ?IfcPropertySet
		WHERE
		{
			BIND( fn:XPath(?IfcPropertySet,"/IfcPropertySingleValue/@ref" ) AS ?IfcPropertySingleValue_REF )        
		}.		
	}	
	ITERATOR iter:XPath(?source, "//ifc_uos/IfcRelDefinesByProperties[RelatedObjects/IfcPlate[@ref='"+?IfcPlate_ID+"']]" ) AS ?IfcRelDefinesByProperties
	WHERE
	{
		BIND( fn:XPath(?IfcRelDefinesByProperties,"/IfcRelDefinesByProperties/RelatingPropertyDefinition/IfcPropertySet/@ref" ) AS ?IfcPropertySet_REF )     
	}.		
	# <-- FILTER property "Solid"
}

SOURCE <http://ex.org/file1> AS ?source
# This name variable is mapped to a file path in a new line that will be 
# included by the program linked to the original file:

ITERATOR iter:XPath(?source, "//ifc_uos/IfcPlate" ) AS ?IfcPlate
WHERE 
{
	# 1. Extract base URI:
	BIND (str(inst:) as ?base)

	# 2. Extract element names:
	BIND( fn:XPath(?IfcPlate,"/IfcPlate/@id" ) AS ?IfcPlate_ID )	
	BIND( fn:XPath(?IfcPlate,"/IfcPlate/GlobalId/text()") AS ?globalId )
	BIND( fn:XPath(?IfcPlate,"/IfcPlate/Name/text()") AS ?name_IfcRoot )	
	BIND( fn:XPath(?IfcPlate,"/IfcPlate/Tag/text()") AS ?tag )	
	
	# 3. Refine element names:
	BIND( IRI( CONCAT( ?base, "IfcPlate_", ?IfcPlate_ID ) ) AS ?IfcPlate_IRI )
	BIND( (xsd:ID(CONCAT("ID", ?IfcPlate_ID))) as ?RefIdPanel ) . 
}


