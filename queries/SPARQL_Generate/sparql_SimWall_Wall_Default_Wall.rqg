BASE <http://trans.example.com/>
PREFIX iter: <http://w3id.org/sparql-generate/iter/>
PREFIX fn: <http://w3id.org/sparql-generate/fn/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> 
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
PREFIX simcore: <http://www.opteemal.eu/schema/2017/01/SimModelCore#>
PREFIX simres: <http://www.opteemal.eu/schema/2017/01/ResourcesGeneral#>
PREFIX simbldg: <http://www.opteemal.eu/schema/2017/01/BuildingModel#>
PREFIX inst:  <http://opteemal-project.eu/resource/simmodel#>

# last modification 2019.07.08

GENERATE 
{
	GENERATE 
	{
		GENERATE 
		{
			?IfcWall_IRI 
				rdf:type 							simbldg:SimWall_Wall_Default ;
				simcore:name 						?Name ; 			
				simcore:ifcGlobalID 				?GlobalId ;
				simcore:containingSpatialStructure 	?IfcBuildingStorey_IRI ;				
				simbldg:materialLayerSet 			?IfcMaterialLayerSet_IRI ;
				simcore:objectType 					?ObjectType ;  			
				simcore:refId 						?IfcWallRefId ;		
				simcore:isTemplateObject 			"false"^^xsd:boolean ;
				simcore:simModelSubtype 			"Default"^^xsd:string ;		
				simcore:simModelType 				"Wall"^^xsd:string ;
				simcore:simUniqueID 				"not defined" ;
				simcore:sourceModelObjectType 		"IfcWall"^^xsd:string ;
				simcore:sourceModelSchema 			"IFC4" ;
				simcore:tag 						"not defined" ;
				.		
				
			GENERATE 
			{	
				GENERATE 
				{
					?IfcMaterialLayerSet_IRI 
						rdf:type 							simres:SimMaterialLayerSet_OpaqueLayerSet_Default ; 				
						simres:layerSetName				 	?LayerSetName;
						simres:materialLayers				?IfcMaterialLayer_List_IRI ;
						simcore:isTemplateObject 			"false"^^xsd:boolean ;
						simcore:simModelSubtype 			"Default"^^xsd:string ;
						simcore:simModelType 				"OpaqueLayerSet"^^xsd:string ;
						simcore:simUniqueID 				"not defined" ;
						simcore:sourceModelObjectType 		"IfcMaterialLayerSet"^^xsd:string ;
						simcore:sourceModelSchema			"IFC4"^^xsd:string ;
						simcore:refId 						?IfcMaterialLayerSetRefId ;
						.
				}
				ITERATOR iter:XPath(?source, "//ifc_uos/IfcMaterialLayerSet[@id='"+?IfcMaterialLayerSet_REF+"']" ) AS ?IfcMaterialLayerSet
				WHERE
				{
					BIND( fn:XPath(?IfcMaterialLayerSet,"/IfcMaterialLayerSet/MaterialLayers/IfcMaterialLayer[1]/@ref" ) AS ?IfcMaterialLayer_REF )
					BIND( fn:XPath(?IfcMaterialLayerSet,"/IfcMaterialLayerSet/LayerSetName/text()" ) AS ?LayerSetName )
					BIND( IRI( CONCAT( ?base, "IfcMaterialLayer_List_", ?IfcMaterialLayer_REF )) AS ?IfcMaterialLayer_List_IRI )
					BIND( (xsd:ID(CONCAT("ID", ?IfcMaterialLayerSet_REF))) as ?IfcMaterialLayerSetRefId ) . 
				}.	
			}
			ITERATOR iter:XPath(?source, "//ifc_uos/IfcMaterialLayerSetUsage[@id='"+?IfcMaterialLayerSetUsage_REF+"']" ) AS ?IfcMaterialLayerSetUsage
			WHERE
			{
				BIND( fn:XPath(?IfcMaterialLayerSetUsage,"/IfcMaterialLayerSetUsage/ForLayerSet/IfcMaterialLayerSet/@ref" ) AS ?IfcMaterialLayerSet_REF )
				BIND( IRI( CONCAT( ?base, "IfcMaterialLayerSet_", ?IfcMaterialLayerSet_REF)) AS ?IfcMaterialLayerSet_IRI )	
			}.
		}
		ITERATOR iter:XPath(?source, "//ifc_uos/IfcRelAssociatesMaterial[RelatedObjects/IfcWall[@ref='"+?IfcWall_ID+"']]/RelatingMaterial/IfcMaterialLayerSetUsage/@ref" ) AS ?IfcMaterialLayerSetUsage_REF
		WHERE { }.		
		
		# SEARCH FOR PROPERTY SETS CONSUMES A LONG TIME !!!!!!
		GENERATE 
		{
			GENERATE 
			{
				GENERATE 
				{
					?IfcWall_IRI 
						simbldg:wallGrossSideArea	?Area ;
						.
				}
				ITERATOR iter:XPath(?source, "//ifc_uos/IfcPropertySingleValue[@id='"+?IfcPropertySingleValue_REF+"'][Name = 'Area']/NominalValue/IfcAreaMeasure-wrapper/text()") AS ?Area_TEMP
				WHERE { 
					BIND( xsd:double(?Area_TEMP) AS ?Area )
				}.
			}	
			ITERATOR iter:XPath(?source, "//ifc_uos/IfcPropertySet[@id='"+?IfcPropertySet_REF+"']/HasProperties/IfcPropertySingleValue/@ref" ) AS ?IfcPropertySingleValue_REF
			WHERE {	}.	
		}
		ITERATOR iter:XPath(?source, "//ifc_uos/IfcRelDefinesByProperties[RelatedObjects/IfcWall[@ref='"+?IfcWall_ID+"']]/RelatingPropertyDefinition/IfcPropertySet/@ref" ) AS ?IfcPropertySet_REF
		WHERE {	}.		
	}
	ITERATOR iter:XPath(?source, "//ifc_uos/IfcRelContainedInSpatialStructure[RelatedElements/IfcWall[@ref='"+?IfcWall_ID+"']]" ) AS ?IfcRelContainedInSpatialStructure
	WHERE
	{
		BIND( fn:XPath(?IfcRelContainedInSpatialStructure,"/IfcRelContainedInSpatialStructure/RelatingStructure/IfcBuildingStorey/@ref" ) AS ?IfcBuildingStorey_REF )
		BIND( IRI( CONCAT( ?base, "IfcBuildingStorey_",?IfcBuildingStorey_REF ) ) AS ?IfcBuildingStorey_IRI )
	}.
}


SOURCE <http://ex.org/file1> AS ?source
# This name variable is mapped to a file path in a new line that will be 
# included by the program linked to the original file:

ITERATOR iter:XPath(?source, "//ifc_uos/IfcWall" ) AS ?IfcWall
WHERE 
{
	# 1. Extract base URI:
	BIND (str(inst:) as ?base)

	# 2. Extract element names:
	BIND( fn:XPath(?IfcWall,"/IfcWall/@id" ) AS ?IfcWall_ID )	
	BIND( fn:XPath(?IfcWall,"/IfcWall/Name/text()") AS ?Name )	
	BIND( fn:XPath(?IfcWall,"/IfcWall/GlobalId/text()") AS ?GlobalId )
	BIND( fn:XPath(?IfcWall,"/IfcWall/ObjectType/text()") AS ?ObjectType )
	BIND( fn:XPath(?IfcWall,"/IfcWall/Tag/text()") AS ?tag )	
	
	BIND( IRI( CONCAT( ?base, "IfcWall_", ?IfcWall_ID ) ) AS ?IfcWall_IRI )
	BIND( (xsd:ID(CONCAT("ID", ?IfcWall_ID))) as ?IfcWallRefId ) . 
}



