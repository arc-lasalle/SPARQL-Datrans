BASE <http://trans.example.com/>
PREFIX iter: <http://w3id.org/sparql-generate/iter/>
PREFIX fn: <http://w3id.org/sparql-generate/fn/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> 
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
PREFIX simcore: <http://www.opteemal.eu/schema/2017/01/SimModelCore#>
PREFIX simres: <http://www.opteemal.eu/schema/2017/01/ResourcesGeneral#>
PREFIX simbldg: <http://www.opteemal.eu/schema/2017/01/BuildingModel#>
PREFIX inst:  <http://opteemal-project.eu/resource/simmodel#>
PREFIX list: <https://w3id.org/list#> 

# last modification 2019.07.08

GENERATE 
{
	GENERATE 
	{	
		GENERATE 
		{
			GENERATE {
			
				?IfcSpace_IRI 	
					rdf:type 							simbldg:SimSpace_Unoccupied_Default ;
					# ----------------------------------------------------------------------
					simbldg:spaceLightingLoad 			?SpecifiedLightingLoadperarea ;
					simbldg:spaceOccupantLoad 			?HeatGainPerOccupant ;
				 	simbldg:spaceInteriorOrExterior 	?IsExternal ;
					simbldg:naturalAirChangeRate 		?InfiltrationRate ;
				 	simbldg:spaceOccupantDensity 		?AreaPerOccupant ;
				 	simbldg:spaceEquipmentLoad 			?Occupiable ;
					# ----------------------------------------------------------------------
					simcore:ifcGlobalID 				?globalId ;
					simcore:compositionType        		?CompositionType ;
					simcore:placement 					?IfcLocalPlacement_IRI ;
					simcore:refId 						?IfcSpaceRefId ;		
					simcore:isTemplateObject 			"false"^^xsd:boolean ;
					simcore:simModelSubtype 			"Default"^^xsd:string ;
					simcore:simModelType 				"Unoccupied"^^xsd:string ;
					simcore:simUniqueID 				"not defined" ;
					simcore:sourceModelObjectType 		"IfcSpace"^^xsd:string ;
					simcore:sourceModelSchema 			"IFC4"^^xsd:string ;
					.		
				
				GENERATE 
				{
					?IfcSpace_IRI 
						simbldg:spaceInSpatialContainer 	?IfcBuildingStorey_IRI ;
						.
				}
				ITERATOR iter:XPath(?source, "//ifc_uos/IfcRelAggregates[RelatedObjects/IfcSpace[@ref='"+?IfcSpace_ID+"']]" ) AS ?IfcRelAggregates
				WHERE
				{
					BIND( fn:XPath(?IfcRelAggregates,"/IfcRelAggregates/RelatingObject/IfcBuildingStorey/@ref" ) AS ?IfcBuildingStorey_REF )
					BIND( IRI( CONCAT( ?base, "IfcBuildingStorey_",?IfcBuildingStorey_REF ) ) AS ?IfcBuildingStorey_IRI )
				}.		
					
				GENERATE 
				{
					?IfcSpace_IRI 
						simbldg:spaceZoneAssignments	 	?IfcRelAssignsToGroup_IRI ;				
						.
					?IfcRelAssignsToGroup_IRI
						a                 					simbldg:SpaceZoneAssignments_List ;
						list:hasContents  					?IfcZone_IRI ;
						.
				}
				ITERATOR iter:XPath(?source, "//ifc_uos/IfcRelAssignsToGroup[RelatedObjects/IfcSpace[@ref='"+?IfcSpace_ID+"']]", "IfcRelAssignsToGroup/RelatingGroup/IfcZone/@ref" ) AS ?IfcRelAssignsToGroup ?IfcZone_REF
				WHERE 
				{
					BIND( IRI( CONCAT( ?base, "IfcRelAssignsToGroup_", ?IfcZone_REF)) AS ?IfcRelAssignsToGroup_IRI )	
					BIND( IRI( CONCAT( ?base, "IfcZone_", ?IfcZone_REF)) AS ?IfcZone_IRI )	
				}.
				
				GENERATE 
				{
					GENERATE {
						?IfcSpace_IRI 	simbldg:occupancyScheduleAssignment ?OccupancySchedule_IRI .
						?IfcSpace_IRI 	simbldg:equipmentScheduleAssignment ?EquipmentSchedule_IRI .
						?IfcSpace_IRI 	simbldg:lightingScheduleAssignment 	?LightingSchedule_IRI .
					}
					ITERATOR iter:XPath(?source, "//ifc_uos/IfcPropertyReferenceValue[@id='"+?IfcPropertyReferenceValue_REF+"']" ) AS ?IfcPropertyReferenceValue
					WHERE {
						BIND(  CONCAT("IfcIrregularTimeSeries_", fn:XPath(?IfcPropertyReferenceValue,"/IfcPropertyReferenceValue[Name = 'OccupancySchedule']/PropertyReference/IfcIrregularTimeSeries/@ref")) AS ?OccupancySchedule_IRI )
						BIND(  CONCAT("IfcIrregularTimeSeries_", fn:XPath(?IfcPropertyReferenceValue,"/IfcPropertyReferenceValue[Name = 'EquipmentSchedule']/PropertyReference/IfcIrregularTimeSeries/@ref")) AS ?EquipmentSchedule_IRI )
						BIND(  CONCAT("IfcIrregularTimeSeries_", fn:XPath(?IfcPropertyReferenceValue,"/IfcPropertyReferenceValue[Name = 'LightingSchedule']/PropertyReference/IfcIrregularTimeSeries/@ref")) AS ?LightingSchedule_IRI )
					}.
				}	
				ITERATOR iter:XPath(?source, "//ifc_uos/IfcPropertySet[@id='"+?IfcPropertySet_REF+"']/HasProperties/IfcPropertyReferenceValue/@ref" ) AS ?IfcPropertyReferenceValue_REF
				WHERE {	}.	
			}
			ITERATOR iter:XPath(?source, "//ifc_uos/IfcPropertySingleValue[@id='"+?IfcPropertySingleValue_REF+"']" ) AS ?IfcPropertySingleValue
			WHERE {
				BIND(  xsd:double(fn:XPath(?IfcPropertySingleValue,"/IfcPropertySingleValue[Name = 'Specified Lighting Load per area']/NominalValue/IfcReal-wrapper/text()")) AS ?SpecifiedLightingLoadperarea )
				BIND(  xsd:double(fn:XPath(?IfcPropertySingleValue,"/IfcPropertySingleValue[Name = 'HeatGainPerOccupant']/NominalValue/IfcPowerMeasure-wrapper/text()")) AS ?HeatGainPerOccupant )
				BIND(             fn:XPath(?IfcPropertySingleValue,"/IfcPropertySingleValue[Name = 'IsExternal']/NominalValue/IfcBoolean-wrapper/text()") AS ?IsExternal )
				BIND(  xsd:double(fn:XPath(?IfcPropertySingleValue,"/IfcPropertySingleValue[Name = 'InfiltrationRate']/NominalValue/IfcReal-wrapper/text()")) AS ?InfiltrationRate )
				BIND(  xsd:double(fn:XPath(?IfcPropertySingleValue,"/IfcPropertySingleValue[Name = 'AreaPerOccupant']/NominalValue/IfcAreaMeasure-wrapper/text()")) AS ?AreaPerOccupant )
				BIND(  xsd:double(fn:XPath(?IfcPropertySingleValue,"/IfcPropertySingleValue[Name = 'Occupiable']/NominalValue/IfcInteger-wrapper/text()")) AS ?Occupiable )
				FILTER(xsd:string(?Occupiable) = xsd:string(0))
			}.
		}	
		ITERATOR iter:XPath(?source, "//ifc_uos/IfcPropertySet[@id='"+?IfcPropertySet_REF+"']/HasProperties/IfcPropertySingleValue/@ref" ) AS ?IfcPropertySingleValue_REF
		WHERE {	}.	
	}
	ITERATOR iter:XPath(?source, "//ifc_uos/IfcRelDefinesByProperties[RelatedObjects/IfcSpace[@ref='"+?IfcSpace_ID+"']]/RelatingPropertyDefinition/IfcPropertySet/@ref" ) AS ?IfcPropertySet_REF
	WHERE {	}.		
}

SOURCE <http://ex.org/file1> AS ?source
# This name variable is mapped to a file path in a new line that will be 
# included by the program linked to the original file:

ITERATOR iter:XPath(?source, "//ifc_uos/IfcSpace" ) AS ?IfcSpace
WHERE 
{
	# 1. Extract base URI:
	BIND (str(inst:) as ?base)

	# 2. Extract element names:
	BIND( fn:XPath(?IfcSpace,"/IfcSpace/@id" ) AS ?IfcSpace_ID )	
	BIND( fn:XPath(?IfcSpace,"/IfcSpace/GlobalId/text()") AS ?globalId )
	BIND( fn:XPath(?IfcSpace,"/IfcSpace/CompositionType/text()") AS ?CompositionType )
	BIND( fn:XPath(?IfcSpace,"/IfcSpace/ObjectPlacement/IfcLocalPlacement/@ref") AS ?IfcLocalPlacement_REF )
	BIND( IRI( CONCAT( ?base, "IfcLocalPlacement_", ?IfcLocalPlacement_REF ) ) AS ?IfcLocalPlacement_IRI )	
	
	BIND( IRI( CONCAT( ?base, "IfcSpace_", ?IfcSpace_ID ) ) AS ?IfcSpace_IRI )
	BIND( (xsd:ID(CONCAT("ID", ?IfcSpace_ID))) as ?IfcSpaceRefId ) . 
}





